import asyncio
import io
import logging
import ssl
import sys
from typing import Any, Dict

from aiogram.methods.send_photo import SendPhoto
import aiofiles
import aiohttp
import certifi
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, WebAppInfo, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNotFound, TelegramForbiddenError, TelegramUnauthorizedError, TelegramBadRequest
from aiogram.utils.chat_member import ADMINS
from aiogram import types
from aiogram.types.message import ContentType
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    CallbackQuery,
    InputMediaPhoto
)
from pyexpat.errors import messages

from cfg import admins, TOKEN, PAY_TOKEN
from Backend import DataBase

db = DataBase()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
rt = Router()

# FSM context groups
class Form(StatesGroup):
    branch = State()
    shift = State()
    f_shift = State()
    s_shift = State()
    group_name = State()
    settings = State()
    table = State()
    global_msg = State()


async def is_admin(user_id, chat_id):
    try:
        member = await bot.get_chat_member(chat_id, user_id)

        return  isinstance(member, ADMINS)
    except:
        return False

@rt.message(Command("here"))
async def here_command(message: Message):
    is_admin_user = message.chat.type == 'private' or await is_admin(message.from_user.id,
                                                                                    message.chat.id)
    if not is_admin_user:
        return
    try:
        await message.answer("–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞")
        await db.change_thread_value(message.chat.id, message.message_thread_id)
    except Exception as e:
        await bot.send_message(admins[0], f'–ë–∞–±–∞1 {e}')

@rt.message(F.text == '–ú–µ–Ω—é‚¨ÖÔ∏è')
async def menu(message: Message, state: FSMContext):
    is_admin_user = message.chat.type == 'private' or await is_admin(message.from_user.id,
                                                                     message.chat.id)
    if not is_admin_user:
        return
    await state.clear()
    await bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–πc—Ç–≤–∏—è:\n\n"
                                                  "1. –§–∏–ª–∏–∞–ª: –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª\n\n"
                                                  "2. –°–º–µ–Ω–∞: –í—ã–±—Ä–∞—Ç—å —Å–º–µ–Ω—É –æ–±—É—á–µ–Ω–∏—è.\n\n"
                                                  "3. –ö–ª–∞—Å—Å: –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è\n\n"
                                            "4. –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                 [
                                     InlineKeyboardButton(text='–§–∏–ª–∏–∞–ªüè´', callback_data='get_branch')
                                 ],
                                 [
                                     InlineKeyboardButton(text='–°–º–µ–Ω–∞‚è∞', callback_data='get_shift'),
                                     InlineKeyboardButton(text='–ö–ª–∞—Å—Åüóì', callback_data='get_group'),
                                 ],
                                 [
                                     InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüéì', callback_data='schedule')
                                 ]
                             ]
                         ))

@rt.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüîë')
async def profile(message: Message, state: FSMContext):
    is_admin_user = message.chat.type == 'private' or await is_admin(message.from_user.id,
                                                                     message.chat.id)
    if not is_admin_user:
        return
    await state.clear()
    await message.answer("üëá")
    data = await db.get_user_data(message.chat.id)
    chat = await bot.get_chat(message.chat.id)
    await message.answer(f"üîë–ü—Ä–æ—Ñ–∏–ª—å\n"
                         f"‚îúüë§–ù–∏–∫ + ID: {chat.first_name}({message.chat.id})\n"
                         f"‚îúüè´–§–∏–ª–∏–∞–ª: {data[3]}\n"
                         f"‚îú‚è∞–°–º–µ–Ω–∞: {data[2]}\n"
                         f"‚îîüóì–ö–ª–∞—Å—Å: {data[1]}",
    )


@rt.message(CommandStart())
async def Start_Comand(message: Message, state: FSMContext):
    is_admin_user = message.chat.type == 'private' or await is_admin(message.from_user.id,
                                                                     message.chat.id)
    if not is_admin_user:
        return
    try:
        if not await db.user_exists(message.chat.id):
            await db.add_user(message.chat.id, '-', '-', message.message_thread_id)
    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await state.update_data(branch=message.text)
    non_admin = [
            [
                KeyboardButton(text='–ú–µ–Ω—é‚¨ÖÔ∏è'),
                KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüîë')
            ]
        ]
    admin = [
            [
                KeyboardButton(text='–ú–µ–Ω—é‚¨ÖÔ∏è'),
                KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüîë')
            ],
            [
                KeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüóí")
            ]
        ]
    if message.chat.id in admins:
        keyboard = admin
    else:
        keyboard = non_admin
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –ò–∑–º–µ–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ –∏ —Å–º–µ–Ω–µ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. ‚úçÔ∏è", reply_markup=ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    ))
    await menu(message, state)



@rt.callback_query(F.data == 'get_shift')
async def settings_shift(query: CallbackQuery, state: FSMContext):
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                                    query.message.chat.id)
    if not is_admin_user:
        return
    await state.set_state(Form.shift)
    await query.message.answer("üëá")
    await bot.answer_callback_query(query.id)
    await bot.send_message(query.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: \n\n",
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                 [
                                     InlineKeyboardButton(text='–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞1Ô∏è‚É£', callback_data='–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞1Ô∏è‚É£'),
                                     InlineKeyboardButton(text='–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞2Ô∏è‚É£', callback_data='–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞2Ô∏è‚É£'),

                                 ],
                                 [
                                     InlineKeyboardButton(text='–û–±–µ —Å–º–µ–Ω—ã(1Ô∏è‚É£+2Ô∏è‚É£)', callback_data='–û–±–µ —Å–º–µ–Ω—ã(1Ô∏è‚É£+2Ô∏è‚É£)'),
                                 ],
                             ]
                         ))


@rt.callback_query(Form.shift)
async def handle_shift(query: CallbackQuery, state: FSMContext):
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                           query.message.chat.id)
    if not is_admin_user:
        await state.clear()
        return
    shift = await get_shift(query.data)
    try:
        await db.change_photo_value(query.message.chat.id, shift)
    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await query.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n–°–º–µ–Ω–∞: {query.data}.")
    await menu(query.message, state)

async def get_shift(text: str) -> int:
    if text == '–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞1Ô∏è‚É£':
        return 1
    if text == '–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞2Ô∏è‚É£':
        return 2
    if text == '–û–±–µ —Å–º–µ–Ω—ã(1Ô∏è‚É£+2Ô∏è‚É£)':
        return 3
    else:
        return 0


@rt.callback_query(F.data == 'get_branch')
async def settings_branch(query: CallbackQuery, state: FSMContext):
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                                    query.message.chat.id)
    if not is_admin_user:
        return
    await state.set_state(Form.branch)
    await bot.answer_callback_query(query.id)
    await query.message.answer("üëá")
    await query.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∏–ª–∏–∞–ª:\n\n",
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                 [
                                     InlineKeyboardButton(text='–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–π', callback_data='–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–π'),
                                 ],
                                 [
                                     InlineKeyboardButton(text='–°–∞—Ö–∞—Ä–æ–≤–∞', callback_data='–°–∞—Ö–∞—Ä–æ–≤–∞'),
                                     InlineKeyboardButton(text='–ú–∞–∫–µ–µ–≤–∞', callback_data='–ú–∞–∫–µ–µ–≤–∞'),
                                 ]
                             ],
                         ))

@rt.callback_query(Form.branch)
async def handle_branch(query: CallbackQuery, state: FSMContext):
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                           query.message.chat.id)
    if not is_admin_user:
        await state.clear()
        return
    await bot.answer_callback_query(query.id)
    try:
        await db.change_branch_value(query.message.chat.id, query.data)
    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await bot.send_message(query.message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à —Ñ–∏–ª–∏–∞–ª: {query.data}")
    await menu(query.message, state)


@rt.callback_query(F.data == 'schedule')
async def get_schedule(query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(query.id)
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                                    query.message.chat.id)
    if not is_admin_user:
        return
    await query.message.answer("üëå")
    try:
        data = await db.get_user_data(query.message.chat.id)
    except Exception as e:
        await bot.send_message(admins[0], f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
    if data[3] != '-' and data[2] != 0:
        try:
            photos = await db.get_photos()
        except Exception as e:
            await bot.send_message(admins[0], f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
        if len(photos) == 0:
            await query.message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.")
        for photo in photos:
            if photo[1] == data[3] and (data[2] == 3 or data[2] == photo[2]):
                await bot.send_photo(query.message.chat.id, photo=photo[0])
    else:
        await query.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª, –ª–∏–±–æ —Å–º–µ–Ω—É –≤ –º–µ–Ω—é")
    await menu(query.message, state)



@rt.callback_query(F.data == 'get_group')
async def settings_class(query: CallbackQuery, state: FSMContext):
    is_admin_user = query.message.chat.type == 'private' or await is_admin(query.from_user.id,
                                                                           query.message.chat.id)
    if not is_admin_user:
        return
    await bot.answer_callback_query(query.id)
    await state.set_state(Form.group_name)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 11.1, 8–ì")

@rt.message(Form.group_name)
async def handle_class(message: Message, state: FSMContext):
    try:
        await db.change_class_value(message.chat.id, message.text)
    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à –∫–ª–∞—Å—Å: {message.text}")
    await menu(message, state)

@rt.message(F.text == '–í—ã–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüóí')
async def admin_tree(message: Message, state: FSMContext):
    await message.answer('üëá')
    try:
        data = await db.get_user_data(message.chat.id)
    except Exception as e:
        await bot.send_message(admins[0], f"–û—à–∏–±–∫–∞:{e}")
    if data[3] != '-':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ, —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞", callback_data='first_shift'),
                    InlineKeyboardButton(text='–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞', callback_data='second_shift')
                ],
            ]
        ))
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
        await menu(message, state)

@rt.callback_query(F.data == 'first_shift')
async def handle_first_shift(query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(query.id)
    await state.set_state(Form.f_shift)
    await query.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã.")

@rt.message(Form.f_shift, F.photo)
async def f_shift(message: Message, state: FSMContext):
    try:
        udata = await db.get_user_data(message.chat.id)
    except Exception as e:
        await bot.send_message(admins[0], f"–û—à–∏–±–∫–∞:{e}")

    await message.reply("–§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

    try:
        file_id = message.photo[-1].file_id
        try:
            photos = await db.get_photos()
        except Exception as e:
            await bot.send_message(admins[0], f"–ü–ª–∞—á–µ–≤–Ω–æ.")
        if len(photos) >= 2:
            await db.add_photo(file_id, udata[3], 1, True)
        else:
            await db.add_photo(file_id, udata[3], 1,False)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        rows = await db.get_users_by_branch(udata[3])
        target_users = [row for row in rows if row[2] == 1 or row[2] == 3]
        print(target_users)
        await send_photos_in_batches(target_users, file_id)
        await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        await menu(message, state)

    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @XorKoT")


async def send_photos_in_batches(users, photo_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∞—Ä—Ç–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ Telegram API.
    """
    batch_size = 30
    for i in range(0, len(users), batch_size):
        batch = users[i:i + batch_size]
        tasks = []

        for user in batch:
            tasks.append(send_photo_safe(user[0], photo_id, user[4]))

        await asyncio.gather(*tasks)
        await asyncio.sleep(1)


async def send_photo_safe(chat_id, photo_id, thread_id):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        await bot.send_photo(chat_id, photo=photo_id, message_thread_id=thread_id)
    except TelegramNotFound:
        await db.delete_user(chat_id)
    except TelegramForbiddenError:
        await db.delete_user(chat_id)
    except TelegramUnauthorizedError:
        await db.delete_user(chat_id)
    except TelegramBadRequest:
        await db.delete_user(chat_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


@rt.callback_query(F.data == 'second_shift')
async def handle_first_shift(query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(query.id)
    await state.set_state(Form.s_shift)
    await query.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ç–æ—Ä–æ–π —Å–º–µ–Ω—ã.")

@rt.message(Form.s_shift, F.photo)
async def s_shift(message: Message, state: FSMContext):
    try:
        udata = await db.get_user_data(message.chat.id)
    except Exception as e:
        await bot.send_message(admins[0], f"–û—à–∏–±–∫–∞:{e}")

    await message.reply("–§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

    try:
        file_id = message.photo[-1].file_id
        try:
            photos = await db.get_photos()
        except Exception as e:
            await bot.send_message(admins[0], f"–ü–ª–∞—á–µ–≤–Ω–æ.")
        if len(photos) >= 2:
            await db.add_photo(file_id, udata[3], 2, True)
        else:
            await db.add_photo(file_id, udata[3], 2,False)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        rows = await db.get_users_by_branch(udata[3])
        target_users = [row for row in rows if row[2] == 2 or row[2] == 3]

        await send_photos_in_batches(target_users, file_id)
        await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        await menu(message, state)

    except Exception as e:
        await bot.send_message(admins[0], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @XorKoT")


@rt.message(Command("global_msg"))
async def global_message(message: Message, state: FSMContext):
    await state.set_state(Form.global_msg)
    await message.reply("–ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è")

@rt.message(Form.global_msg)
async def handle_global(message: Message, state: FSMContext):
    try:
        users = await db.get_all_users()
    except Exception as e:
        await message.answer(f"GG {e}")
    for user in users:
        if int(user[1]) > 0:
            try:
                await bot.send_message(user[1], message.text)
            except Exception as e:
                await message.answer(f'–û—à–∏–±–∫–∞ {e}')

@rt.message(Command("secret_"))
async def check_users(message: Message):
    try:
        data = await db.get_all_users()
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ {e}')
    for user in data:
        try:
            chat = await bot.get_chat(chat_id=user[1])
            name = chat.first_name
            await message.answer(f'{name}: {user[1:]}')
            await asyncio.sleep(0.5)
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞: {e}')


async def main():
    dp = Dispatcher()
    dp.include_router(rt)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())